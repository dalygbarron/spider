Birth and Death Switch Logic
============================

Birth and death switches should be evaluated after every time the script has
been run.

Also, an instances birth and death switches can actually be boolean expressions
based on multiple switches.

How do we differentiate between local and global switches, and can we mix the
two?

Ok so in order to handle local and global together, and allow boolean
expressions instead of just switch names, we will have a very small stack based
language for defining the boolean expressions which will work as follows:
any string of characters and numbers is considered to be a switch, and anything
else is reserved for use as a builtin symbol, technically if you use a word
that contains symbols but is not a builtin used word, behavior is undefined (in
other words don't do it but I can't be bothered to check so it will treat them
as switches). Each successive token is evaluated, taking what arguments are
needed from the stack, and then placed upon the stack, which should mean that
at the end of evaluation a fully formed boolean expression should be the only
thing left on the stack. If multiple things are left on the stack, we shall
treat this as a short hand and we will complete the expression by adding ANDs
on top until only one expression is left.

camelClothed camelFed AND camelLoved NOT AND
this expression means when the camel is clothed and fed but not loved

gotHat gotHernia
this means when you ahve got a hat and a hernia and leaves 2 expressions on the
stack, which implicitly tells the evaluator to combine them with an AND.

As you can see it is not possible to do expressions on inventory counts. This
is partly because it is difficult and partly because I don't think it makes
sense to do so really, rather you should allow interaction with an instance and
then in that instance's code check on the inventory count to know what logic to
perform.

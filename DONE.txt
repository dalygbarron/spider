Sprite Batcher
    Yeah so we are going to use a sprite batcher I think since it makes things
    pretty easy to work with compared to intentionally storing everything in
    vertex buffers and all that stuff. That sprite batcher I saw online looked
    like a good place to start stealing code.
    We will probably want to integrate this code with the rat pack code so that
    the rats that the rat pack gives out are the type of object the sprite
    batcher considers to be a sprite. In fact, the sprite batcher could
    actually be the rat pack class.
    Along with this we will create a ratpack testing scene which displays every
    single rat in the pack similar to the example of that moony spritesheet.

Finally get directories under control
    Yeah so currently I have no idea how the directory structure is meant to be
    working in terms of which files are supposed to be referenced relative to
    what directory. I guess all the references that are within files will have
    to be relative to that file. Anyway I need to get that under control so
    that things load properly not matter where they are relative to one
    another. Particularly, I need to make it that the ratpack can be found and
    loaded from the game, and then from there, the ratpack texture must be
    loaded from the ratpack.

Loading Core
    Core is the class that represents the contents of game.xml, and it also
    stores stuff like the game's spritesheet and repositories, and it is the
    common dependency to all screens. We need to add the code that loads it and
    spritesheet in from xml.

Initial Renderer
    We will need to have some special rendering functions which make use of
    assets that are contained in the rat pack and elsewhere, so we will need to
    have an xml configured renderer class. The only thing I can think of that
    it will need off the top of my head is a function to render a collection of
    points as a convex shape, which will require the xml configuration of
    a shape node graphic and a shape edge graphic. Also possibly a selected
    node and edge graphic but we will see how it all works.
    Also will want to implement in game gui rendering functions, which will
    possibly require the creation of a 9patch class. Will want to make it that
    the 9patches are also configured in the renderer xml file and stored by the
    renderer object.
    For the initial entity screen we need to be able to render boxes and
    points with a crosshair type of thing. I will add a point function that
    renders a crosshair, and a node function that renders some kind of circular
    thing.

Initial Entity Screen
    To start with the entity screen requires showing the entity's image, and
    allowing the user to pan with some key, and zoom in and out with the scroll
    wheel. Should also be allowed to press a button on the menu to recenter
    everything. Should also be a dialogue on the menu to choose the picture or
    choose a new picture (which is a sprite in the ratpack remember).
    When no picture has yet been chosen it should just show a nice white
    square or nothing. ALSO, you should be able to press a button to save the
    entity file and it should save.
    For the sprite selecting bit, it would be nice if it gave a list of the
    names of all of the sprites, and then let you narrow the list by typing in
    the start of the name of the sprite you want or something like that. Might
    be a bitch in the ass though so maybe don't bother.

Renderer Update
    Add rendering concave shapes and stuff. Also add rendering 9patches so that
    we can use that for the gui.

Concave Shape
    I either need to steal or otherwise get my hands on a concave shape
    implementation which can be visualised one way or the other, and which can
    tell whether or not a point is inside the shape. The visualisation should
    probably be done seperately, now I think of it, because when we use it in
    the level screen it is going to be deformed so the built in representation
    is not going to work anway.
    As well as being able to tell you if a point is within the shape, it should
    probably also be able to take a point and tell you if that point is close
    enough to a node or an edge to be over that node or edge for the purposes
    of manipulating the shape.
    We should probably have tests for all that stuff also since it sounds
    compliocated and painful to manually test.

Proper Entity Screen
    Same as before but it must now also allow you to manipulate the entity's
    wireframe and save it into the file.
    Also, if the user tries to save things in circumstances that are silly like
    there is no name or a name with a space or no sprite it will complain.

Level Screen
    Must be able to set the background and pan around in 3d, entities must
    place themselves in the 3d joint and also rotate thus that it looks right,
    which also means I need to figure that out. Should be able to select entity
    files to add into the level

Look into built in text editor
    Would be handy to have for level screen but I am not sure how hard it would
    be to get it to work so maybe no.

Screen Stack
    Screens should be arranged in a stack so you can push new screens on, and
    when they are removed again they return a numeric value to the screen
    below. Multiple screens can also be rendered, each screen will provide
    a function that lets you query if it allows rendering of the screen
    underneath, and it iwll figure this out at the point that the stack is
    altered. After that it will just know which ones to render in order of
    oldest to newest.

game gui
    Gui should be it's own screen.
    Should be ripped off from the gui I developed for snowpea, that was great.
    Won't support keyboard only or gamepad but who gives a fuck? Not me. Text
    will be implemented with sf::Text so that I can do wrapping without too
    much pain.

Scripting
    Will need to embed a scripting language, and then make it able to drive the
    gui, and move the camera around and stuff.
    Should be able to implement a basic main menu that leads into another
    screen when you press the play button.

Playable Level Screen
    To start off we just need to have the screen and make it that it follows
    the mouse. Make sure that it can handle having GUI elements that make the
    camera stop following the mouse until they go away.

Make transitions queued and not instant.
    Yeah instant transitions are causing scripts to shit it. Therefore, we must
    make it that when you call those transition functions the core object just
    stores some kind of transition queue which it then deals with at some
    specific point in the main loop. I suppose that is for the best anyway.

Improve Script Stuff
    Whenver you change the running function you need to
    reset the error handler, so should add a function for that, and should
    probably add a function for calling the script in which it handles fuck
    ups.

Local and Global switches
    This is a useful feature for two reasons. Firstly, it will make it easier
    to check whether a given item is dead in a given level without
    concatenating a lot of strings, and also it is just a generally useful
    thing to so you can make switches called "die" or whatever in more than one
    level without fucking things up a lot.

transferring between advneture screens
    yep. Scripts and stuff should not fail, birth and death switches should
    work, etc etc.

Properly Playable Level Screen with items and shit.
    Yep like it says right there.

Running battles synchronously from adventure screen.
    Not sure how much work I actually need to do here, but I must verify it
    works at least. Like puzzles, battles should only return a success or
    failure status, they do not trigger a game over screen. The game over
    screen should just be triggered by the default battle starting script
    library function when a failure status is received.

